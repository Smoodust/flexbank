from abc import ABC, abstractmethod
from telebot import types
from telebot.types import InputFile
from backend import *
from utils import *

class State(ABC):
    @abstractmethod
    def render(self, message, connection):
        pass

    @abstractmethod
    def next(self, message, connection):
        pass

class Start(State):
    def __init__(self, bot):
        self.bot = bot

    def render(self, message, connection):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–î–∞'))
        self.bot.send_animation(message.chat.id, InputFile(r"C:\Users\USER\Documents\flexbank\content\FlexBank.gif"), caption='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–∞–Ω–∫–∏–Ω–≥-–±–æ—Ç Neo! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n–ù–∞–∂–º–∏—Ç–µ –î–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.', reply_markup=markup)

    def next(self, message, connection):
        if message.text == '–î–∞':
            return LoginInput(self.bot)
        else:
            return Start(self.bot)

class LoginInput(State):
    def __init__(self, bot):
        self.bot = bot

    def render(self, message, connection):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:", reply_markup=types.ReplyKeyboardRemove())

    def next(self, message, connection):
        return PasswordInput(self.bot, message.text)

class PasswordInput(State):
    def __init__(self, bot, login):
        self.bot = bot
        self.login = login

    def render(self, message, connection):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

    def next(self, message, connection):
        passw = message.text
        if check_authentication(connection, self.login, passw):
            return VerifyPerson(self.bot, self.login, passw)
        else:
            self.bot.send_photo(message.chat.id, InputFile(r"C:\Users\USER\Documents\flexbank\content\Dead_Svin.jpg"), caption='–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            return LoginInput(self.bot)

class VerifyPerson(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passw = passw

    def render(self, message, connection):
        user_info = get_user_by_login_pass(connection, self.login, self.passw)
        user_info['name'], user_info['surname']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–î–∞'), types.KeyboardButton('–ù–µ—Ç'))
        self.bot.send_message(message.chat.id, '{} {}, —ç—Ç–æ –≤—ã?'.format(user_info['surname'], user_info['name']), reply_markup=markup)

    def next(self, message, connection):
        if message.text == '–î–∞':
            return MainMenu(self.bot, self.login, self.passw)
        elif message.text == '–ù–µ—Ç':
            self.bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ ;)")
            return LoginInput(self.bot)
        else:
            return VerifyPerson(self.bot, self.login, self.passw)

class MainMenu(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passw = passw

    def render(self, message, connection):
        user_info = get_user_by_login_pass(connection, self.login, self.passw)
        accounts_reply = types.KeyboardButton('–°—á–µ—Ç–∞')
        ops_reply = types.KeyboardButton('–û–ø–µ—Ä–∞—Ü–∏–∏')
        offers_reply = types.KeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
        news_reply = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(accounts_reply, ops_reply, offers_reply, news_reply)
        self.bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}!\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?".format(user_info['name']), reply_markup=markup)

    def next(self, message, connection):
        if message.text == '–°—á–µ—Ç–∞':
            return Accounts(self.bot, self.login, self.passw)
        elif message.text == '–û–ø–µ—Ä–∞—Ü–∏–∏':
            return Operations(self.bot, self.login, self.passw)
        elif message.text == '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è':
            return Offers(self.bot, self.login, self.passw)
        elif message.text == '–ù–æ–≤–æ—Å—Ç–∏':
            return News(self.bot, self.login, self.passw)
        else:
            return MainMenu(self.bot, self.login, self.passw)

class Accounts(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passw = passw

    def render(self, message, connection):
        user_info = get_user_by_login_pass(connection, self.login, self.passw)
        accounts = get_accounts_by_user(connection, user_info['id'])
        result = [f"üßæ {i+1}. {str(x['number'])} - {status_to_string[x['status']]} {type_to_string[x['type']]}" for i, x in enumerate(accounts)]
        result = '\n'.join(result)
        buttons = [types.KeyboardButton('–ù–∞–∑–∞–¥'), types.KeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å')]
        buttons = buttons + [types.KeyboardButton(str(i+1)) for i in range(len(accounts))]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons)
        self.bot.send_message(message.chat.id, result, reply_markup=markup)

    def next(self, message, connection):
        user_info = get_user_by_login_pass(connection, self.login, self.passw)
        accounts = get_accounts_by_user(connection, user_info['id'])
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        elif message.text == '–û–±–Ω–æ–≤–∏—Ç—å':
            return Accounts(self.bot, self.login, self.passw)
        elif message.text.isdigit():
            if int(message.text) > 0 and int(message.text) <= len(accounts):
                return ConcreteAccount(self.bot, self.login, self.passw, int(message.text) - 1)
        else:
            return Accounts(self.bot, self.login, self.passw)

class ConcreteAccount(State):
    def __init__(self, bot, login, passw, index):
        self.bot = bot
        self.login = login
        self.passw = passw
        self.index = index

    def render(self, message, connection):
        user_info = get_user_by_login_pass(connection, self.login, self.passw)
        account = get_accounts_by_user(connection, user_info['id'])[self.index]
        cards = get_cards_by_account(connection, account['id'])
        result = concrete_account_first.format(account['number'], get_diff_transaction_account(connection, account['id']), len(cards))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        #types.ReplyKeyboardRemove()
        self.bot.send_message(message.chat.id, result, reply_markup=markup)

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return Accounts(self.bot, self.login, self.passw)
        else:
            return ConcreteAccount(self.bot, self.login, self.passw, self.index)

class Operations(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passw = passw

    def render(self, message, connection):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        self.bot.send_message(message.chat.id, "ops", reply_markup=markup)

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        elif message.text == '–ü–µ—Ä–µ–≤–æ–¥—ã':
            return Operations(self.bot, self.login, self.passw)
        else:
            return Operations(self.bot, self.login, self.passw)

class TransactionsBetweenBills(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passwd = passwd

    def render(self, message, connection):
        self.bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏", reply_markup=but_operation())

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        else:
            return Transactions(self.bot, self.login, self.passw)

class TransactionsBetweenPersons(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passwd = passwd

    def render(self, message, connection):
        self.bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏", reply_markup=but_operation())

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        else:
            return Transactions(self.bot, self.login, self.passw)

class TransactionsToEbenya(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passwd = passwd

    def render(self, message, connection):
        self.bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏", reply_markup=but_operation())

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        else:
            return Transactions(self.bot, self.login, self.passw)

class Offers(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passw = passw

    def render(self, message, connection):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        user = get_user_by_login_pass(connection, self.login, self.passw)
        if get_sum_transaction_user(connection, user['id']) > 2000000:
            self.bot.send_message(message.chat.id, text='–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≤—ã —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é 2 –º–ª–Ω. —Ä—É–±–ª–µ–π. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∏–ø —Å—Ç–∞—Ç—É—Å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ http://exampe.com', reply_markup=markup)
        elif get_diff_transaction_user(connection, user['id']) < 0:
            self.bot.send_message(message.chat.id, text='–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤–∞—à –¥–æ—Ö–æ–¥. –ù–∞—à –±–∞–Ω–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—Ä–æ—á–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∫–µ: http://exampe.com', reply_markup=markup)
        else:
            self.bot.send_message(message.chat.id, text='Flexbank –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–ø–æ—Ç–µ–∫—É –ø–æ–¥ –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://exampe.com', reply_markup=markup)

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        else:
            return Offers(self.bot, self.login, self.passw)

class News(State):
    def __init__(self, bot, login, passw):
        self.bot = bot
        self.login = login
        self.passw = passw

    def render(self, message, connection):
        index = random.randint(0, 3)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        self.bot.send_photo(message.chat.id, InputFile(news_dict[index]['image']), text=news_dict[index]['desc'], reply_markup=markup, parse_mode="Markdown")

    def next(self, message, connection):
        if message.text == '–ù–∞–∑–∞–¥':
            return MainMenu(self.bot, self.login, self.passw)
        else:
            return News(self.bot, self.login, self.passw)
